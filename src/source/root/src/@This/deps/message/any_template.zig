const std = @import("std");

pub const Template = struct {
    allocator: std.mem.Allocator,
    message_name: []const u8,

    pub fn init(allocator: std.mem.Allocator, name: []const u8) !*Template {
        var data: *Template = try allocator.create(Template);
        data.message_name = try allocator.alloc(u8, name.len);
        errdefer allocator.destroy(data);
        @memcpy(data.message_name, name);
        data.allocator = allocator;
        return data;
    }

    pub fn deinit(self: *Template) void {
        self.allocator.free(self.message_name);
        self.allocator.destroy(self);
    }

    // The caller owns the returned value.
    pub fn content(self: *Template) ![]const u8 {
        // Replace {{ message_name }} with the message name.
        var replacement_size: usize = try std.mem.replacementSize(u8, self.allocator, template, "{{ message_name }}", self.message_name);
        var with_message_name: []u8 = try self.allocator.alloc(replacement_size);
        std.mem.replace(u8, template, "{{ message_name }}", self.message_name);
        return with_message_name;
    }
};

const template =
    \\/// This file was generated by kickzig when you added the "{{ message_name }}" message.
    \\/// This file will be removed by kickzig if you remove the "{{ message_name }}" message.
    \\const std = @import("std");
    \\
    \\/// This is the "{{ message_name }}" message.
    \\/// KICKZIG TODO:  Add your own Message fields (payload) and methods.
    \\pub const Message = struct {
    \\    _allocator: std.mem.Allocator = undefined,
    \\    _inits: i32 = 0,
    \\
    \\    pub fn deinit(self: *Message) void {
    \\        self._inits -= 1;
    \\        if (self._inits == 0) {
    \\            self.deinit_payload();
    \\            self._allocator.destroy(self);
    \\        }
    \\    }
    \\
    \\    /// KICKZIG TODO: Customize deinit_payload to handle your own fields.
    \\    fn deinit_payload(self: *Message) void {
    \\        _ = self;
    \\    }
    \\
    \\    pub fn reinit(self: *Message) void {
    \\        self._inits += 1;
    \\    }
    \\};
    \\
    \\/// init constructs a new Message.
    \\/// KICKZIG TODO: customize this constructor with your own fields (payload).
    \\pub fn init(allocator: std.mem.Allocator) !*Message {
    \\    var message: *Message = try allocator.create(Message);
    \\    message._allocator = allocator;
    \\    message._inits = 0;
    \\    return message;
    \\}
    \\
;
