const std = @import("std");
const _file_names_ = @import("filenames");
const fmt = std.fmt;

pub const Template = struct {
    allocator: std.mem.Allocator,
    channel_name: []const u8,

    pub fn deinit(self: *Template) void {
        self.allocator.free(self.channel_name);
        self.allocator.destroy(self);
    }

    pub fn content(self: *Template) ![]const u8 {
        var lines = std.ArrayList(u8).init(self.allocator);
        defer lines.deinit();

        {
            const replacement_size: usize = std.mem.replacementSize(u8, line_start, "{{ channel_name }}", self.channel_name);
            const with_channel_name: []u8 = try self.allocator.alloc(u8, replacement_size);
            _ = std.mem.replace(u8, line_start, "{{ channel_name }}", self.channel_name, with_channel_name);
            try lines.appendSlice(with_channel_name);
        }

        if (std.mem.eql(u8, _file_names_.deps.closedownjobs_message_name, self.channel_name)) {
            try lines.appendSlice(line_default);
        } else {
            try lines.appendSlice(line_not_default);
        }

        {
            const replacement_size: usize = std.mem.replacementSize(u8, line_end, "{{ channel_name }}", self.channel_name);
            const with_channel_name: []u8 = try self.allocator.alloc(u8, replacement_size);
            _ = std.mem.replace(u8, line_end, "{{ channel_name }}", self.channel_name, with_channel_name);
            try lines.appendSlice(with_channel_name);
        }

        const owned_slice = try lines.toOwnedSlice();
        const slice = try self.allocator.alloc(u8, owned_slice.len);
        @memcpy(slice, owned_slice);
        return slice;
    }
};

pub fn init(allocator: std.mem.Allocator, name: []const u8) !*Template {
    var template: *Template = try allocator.create(Template);
    template.channel_name = try allocator.alloc(u8, name.len);
    errdefer allocator.destroy(template);
    @memcpy(@constCast(template.channel_name), name);
    template.allocator = allocator;
    return template;
}

const line_start =
    \\/// Through this channel:
    \\/// Messages flow from the front-end to the back-end:
    \\/// 1. Any front-end messenger can send a "{{ channel_name }}" message to the subscribed back-end messengers.
    \\/// 2. Every subscribed back-end messenger receives a copy of each "{{ channel_name }}" message sent from the front-end.
    \\
;

const line_not_default =
    \\/// This file was generated by kickzig when you added the "{{ channel_name }}" message.
    \\/// It will be removed when you remove the "{{ channel_name }}" message.
    \\
    \\
;

const line_default =
    \\/// This file was generated by kickzig when you created this framework.
    \\/// kickzig will never remove or edit this file.
    \\
    \\
;

const line_end =
    \\const std = @import("std");
    \\const GeneralDispatcher = @import("general_dispatcher.zig").GeneralDispatcher;
    \\
    \\pub const _message_ = @import("message").{{ channel_name }};
    \\const ExitFn = @import("various").ExitFn;
    \\
    \\/// Behavior is call-backs and state.
    \\/// .implementor implements the recieveFn.
    \\/// .receiveFn receives a {{ channel_name }} message from the back-end.
    \\pub const Behavior = struct {
    \\    implementor: *anyopaque,
    \\    receiveFn: *const fn (implementor: *anyopaque, message: *_message_.Message) anyerror!void,
    \\};
    \\
    \\pub const Group = struct {
    \\    allocator: std.mem.Allocator = undefined,
    \\    buffer: std.ArrayList(*_message_.Message),
    \\    members: std.AutoHashMap(*anyopaque, *Behavior),
    \\    exit: ExitFn,
    \\    buffer_mutex: std.Thread.Mutex,
    \\    dispatcher: *GeneralDispatcher,
    \\
    \\    pub fn init(allocator: std.mem.Allocator, dispatcher: *GeneralDispatcher, exit: ExitFn) !*Group {
    \\        var channel: *Group = try allocator.create(Group);
    \\        channel.allocator = allocator;
    \\        channel.dispatcher = dispatcher;
    \\        channel.exit = exit;
    \\        channel.buffer_mutex = std.Thread.Mutex{};
    \\        channel.members = std.AutoHashMap(*anyopaque, *Behavior).init(allocator);
    \\        channel.buffer = std.ArrayList(*_message_.Message).init(allocator);
    \\        dispatcher.{{ channel_name }} = channel;
    \\        return channel;
    \\    }
    \\
    \\    pub fn deinit(self: *Group) void {
    \\        // deint each Behavior.
    \\        var iterator = self.members.iterator();
    \\        while (iterator.next()) |entry| {
    \\            const behavior: *Behavior = @ptrCast(entry.value_ptr.*);
    \\            self.allocator.destroy(behavior);
    \\        }
    \\        self.members.deinit();
    \\        // deinit each Message not sent.
    \\        var message: ?*_message_.Message = self.buffer.popOrNull();
    \\        while (message != null) {
    \\            message.?.deinit();
    \\            message = self.buffer.popOrNull();
    \\        }
    \\        self.buffer.deinit();
    \\        self.allocator.destroy(self);
    \\    }
    \\
    \\    /// initBehavior constructs an empty Behavior.
    \\    pub fn initBehavior(self: *Group) !*Behavior {
    \\        return self.allocator.create(Behavior);
    \\    }
    \\
    \\    /// subscribe adds a Behavior that will receiver the message to the Group.
    \\    /// Group owns the Behavior not the caller.
    \\    /// So if there is an error the Behavior is destroyed.
    \\    pub fn subscribe(self: *Group, behavior: *Behavior) !void {
    \\        self.members.put(behavior.implementor, behavior) catch |err| {
    \\            self.allocator.destroy(behavior);
    \\            return err;
    \\        };
    \\    }
    \\
    \\    /// unsubscribe removes a Behavior from the Group.
    \\    /// It also destroys the Behavior.
    \\    /// Returns true if anything was removed.
    \\    pub fn unsubscribe(self: *Group, caller: *anyopaque) bool {
    \\        if (self.members.getEntry(caller)) |entry| {
    \\            const behavior: *Behavior = @ptrCast(entry.value_ptr.*);
    \\            self.allocator.destroy(behavior);
    \\            return self.members.remove(caller);
    \\        }
    \\    }
    \\
    \\    /// send dispatches the message to the Behaviors in Group.
    \\    /// It dispatches in another thread.
    \\    /// It returns after spawning the thread while the thread runs.
    \\    /// It takes control of the message and deinits it.
    \\    /// Receive functions own the message they receive and must deinit it.
    \\    pub fn send(self: *Group, message: *_message_.Message) !void {
    \\        {
    \\            self.buffer_mutex.lock();
    \\            defer self.buffer_mutex.unlock();
    \\            try self.buffer.insert(0, message);
    \\        }
    \\        self.dispatcher.dispatch();
    \\    }
    \\
    \\    pub fn dispatch(self: *Group) !void {
    \\        var message: ?*_message_.Message = self.nextMessage();
    \\        while (message != null) {
    \\            {
    \\                defer message.?.deinit();
    \\                try self._dispatch(message.?);
    \\            }
    \\            message = self.nextMessage();
    \\        }
    \\    }
    \\
    \\    fn nextMessage(self: *Group) ?*_message_.Message {
    \\        self.buffer_mutex.lock();
    \\        defer self.buffer_mutex.unlock();
    \\        return self.buffer.popOrNull();
    \\    }
    \\
    \\    fn _dispatch(self: *Group, message: *_message_.Message) !void {
    \\        var iterator = self.members.iterator();
    \\        while (iterator.next()) |entry| {
    \\            var behavior: *Behavior = entry.value_ptr.*;
    \\            // Send the receiver a copy of the message.
    \\            // The receiver owns the copy and must deinit it.
    \\            const receiver_copy: *_message_.Message = message.copy() catch |err| {
    \\                self.exit(@src(), err, "message.copy()");
    \\                return err;
    \\            };
    \\            // The receiveFn must handle it's own error.
    \\            // If the receiveFn returns an error then stop.
    \\            behavior.receiveFn(behavior.implementor, receiver_copy) catch |err| {
    \\                // Error: Stop dispatching.
    \\                return err;
    \\            };
    \\        }
    \\    }
    \\};
    \\
;
